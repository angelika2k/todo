{"version":3,"sources":["redux/reducer.js","components/TodoItem.js","components/DisplayTodos.js","components/Todos.js","App.js","redux/store.js","reportWebVitals.js","index.js"],"names":["addTodoReducer","createSlice","name","initialState","reducers","addTodos","state","action","push","payload","removeTodos","filter","item","id","updateTodos","map","todo","completeTodos","completed","actions","reducer","TodoItem","props","updateTodo","removeTodo","completeTodo","inputRef","useRef","motion","li","initial","x","transition","type","duration","animate","whileHover","scale","exit","backgroundColor","className","ref","disabled","defaultValue","onKeyPress","e","value","which","current","update","button","whileTap","onClick","focus","style","color","connect","todos","dispatch","addTodo","obj","useState","sort","setSort","AnimatePresence","length","setTodo","onChange","target","handleChange","alert","Math","floor","random","App","h1","y","div","store","configureStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10a7139e.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = [];\n\nconst addTodoReducer = createSlice({\n    name: \"todos\",\n    initialState,\n    reducers: {\n        addTodos: (state, action) => {\n            state.push(action.payload);\n            return state;\n        },\n        removeTodos: (state, action) => {\n            return state.filter(item => item.id !== action.payload);\n        },\n        updateTodos: (state, action) => {\n            return state.map(todo => {\n                if (todo.id === action.payload.id) {\n                    return {\n                        ...todo,\n                        item: action.payload.item,\n                    }\n                }\n                return todo;\n            });\n\n        },\n        completeTodos: (state, action) => {\n            return state.map(todo => {\n                if (todo.id === action.payload) {\n                    return {\n                        ...todo,\n                        completed:true,\n                    }\n                }\n                return todo;\n            });\n        }\n    }\n})\n\nexport const { addTodos, removeTodos, updateTodos, completeTodos } = addTodoReducer.actions;\nexport const reducer = addTodoReducer.reducer;\n","import React, { useRef } from 'react'\nimport { AiFillEdit } from \"react-icons/ai\"\nimport { IoCheckmarkDoneOutline, IoClose } from \"react-icons/io5\"\nimport { motion } from \"framer-motion\";\n\nconst TodoItem = (props) => {\n\n    const { item, updateTodo, removeTodo, completeTodo } = props;\n\n    const inputRef = useRef(true);\n    const changeFocus = () => {\n        inputRef.current.disabled = false;\n        inputRef.current.focus();\n    }\n\n    const update = (id, value, e) => {\n        if (e.which === 13) {\n            updateTodo({ id, item: value });\n            inputRef.current.disabled = true;\n        }\n    }\n\n    return (\n        <motion.li\n            initial={{\n                x: \"150vw\",\n                transition: { type: \"spring\", duration: 2 }\n            }}\n            animate={{\n                x: 0,\n                transition: { type: \"spring\", duration: 2 }\n            }}\n            whileHover={{\n                scale: 0.9,\n                transition: {\n                    type: \"spring\", duration: 0.1\n                }\n            }}\n            exit={{\n                x: \"-60vw\",\n                scale: [1, 0],\n                transition: { duration: 0.5 },\n                backgroundColor:\"rgba(255, 0, 0, 1)\"\n            }}\n        key={item.id} className=\"card\">\n            <textarea ref={inputRef}\n                disabled={inputRef}\n                defaultValue={item.item}\n                onKeyPress={(e) => update(item.id, inputRef.current.value, e)} />\n            <div className=\"btns\">\n                <motion.button\n                    whileHover={{ scale: 1.4 }}\n                    whileTap={{ scale: 0.9 }}\n                    onClick={() => changeFocus()} ><AiFillEdit /></motion.button>\n                {item.completed === false && (\n                    <motion.button\n                        whileHover={{ scale: 1.4 }}\n                        whileTap={{ scale: 0.9 }}\n                        style={{ color: \"green\" }} onClick={() => completeTodo(item.id)} ><IoCheckmarkDoneOutline /></motion.button>\n                )}\n                <motion.button\n                    whileHover={{ scale: 1.4 }}\n                    whileTap={{ scale: 0.9 }}\n                    style={{ color: \"red\" }} onClick={() => removeTodo(item.id)} ><IoClose /></motion.button> {\"\"}\n            </div>\n            {item.completed && <span className=\"completed\">Done</span>}\n        </motion.li>\n    )\n}\n\nexport default TodoItem\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { addTodos, completeTodos, removeTodos, updateTodos } from '../redux/reducer';\nimport TodoItem from './TodoItem';\nimport { AnimatePresence, motion } from \"framer-motion\"\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n        todos: state,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodo: (obj) => dispatch(addTodos(obj)),\n        removeTodo: (id) => dispatch(removeTodos(id)),\n        updateTodo: (obj) => dispatch(updateTodos(obj)),\n        completeTodo: (id) => dispatch(completeTodos(id))\n    }\n}\n\n\nconst DisplayTodos = (props) => {\n    const [sort, setSort] = useState(\"active\")\n    return (\n        <div className=\"displaytodos\">\n            <div className=\"buttons\">\n                <motion.button\n                    whileHover={{ scale: 1.1 }}\n                    whileTap={{ scale: 0.9 }}\n                    onClick={() => setSort(\"active\")}>Active</motion.button>\n                <motion.button\n                    whileHover={{ scale: 1.1 }}\n                    whileTap={{ scale: 0.9 }}\n                    onClick={() => setSort(\"completed\")}>Completed</motion.button>\n                <motion.button\n                    whileHover={{ scale: 1.1 }}\n                    whileTap={{ scale: 0.9 }}\n                    onClick={() => setSort(\"all\")}>All</motion.button>\n            </div>\n            <ul>\n                <AnimatePresence>\n                    {props.todos.length > 0 && sort === \"active\" ?\n                        props.todos.map(item => {\n                            return (\n                                item.completed === false &&\n                                <TodoItem\n                                    key={item.id}\n                                    item={item}\n                                    removeTodo={props.removeTodo}\n                                    updateTodo={props.updateTodo}\n                                    completeTodo={props.completeTodo}\n                                />\n                            )\n                        })\n                        : null}\n\n                    {props.todos.length > 0 && sort === \"completed\" ?\n                        props.todos.map(item => {\n                            return (\n                                item.completed === false &&\n                                <TodoItem\n                                    key={item.id}\n                                    item={item}\n                                    removeTodo={props.removeTodo}\n                                    updateTodo={props.updateTodo}\n                                    completeTodo={props.completeTodo}\n                                />\n                            )\n                        })\n                        : null}\n\n                    {props.todos.length > 0 && sort === \"all\" ?\n                        props.todos.map(item => {\n                            return\n                            <TodoItem\n                                key={item.id}\n                                item={item}\n                                removeTodo={props.removeTodo}\n                                updateTodo={props.updateTodo}\n                                completeTodo={props.completeTodo}\n                            />\n                        })\n                        : null}\n                </AnimatePresence>\n            </ul>\n        </div>\n    )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayTodos);\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux';\nimport { addTodos } from '../redux/reducer';\nimport { GoPlus } from \"react-icons/go\";\nimport { motion } from \"framer-motion\";\n\nconst mapStateToProps = (state) => {\n    return {\n        todos: state,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodo: (obj) => dispatch(addTodos(obj)),\n    }\n}\n\nconst Todos = (props) => {\n\n    const [todo, setTodo] = useState(\"\");\n\n\n    const handleChange = (e) => {\n        setTodo(e.target.value);\n    }\n\n    const add = () => {\n        if (todo === \"\") {\n            alert(\"Input is empty\");\n        } else {\n            props.addTodo({\n                id: Math.floor(Math.random() * 1000),\n                item: todo,\n                completed: false,\n            })\n            setTodo(\"\");\n        }\n    }\n    // console.log(\"props\", props);\n    return (\n        <div className=\"addTodos\">\n            <input type=\"text\" onChange={(e) => handleChange(e)} className=\"todo-input\" value={todo} />\n            <motion.button\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                className=\"add-btn\" onClick={() => add()}><GoPlus /></motion.button>\n            <br />\n        </div>\n    )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\n","import './css/main.css';\nimport DisplayTodos from './components/DisplayTodos';\nimport Todos from './components/Todos';\nimport { motion } from \"framer-motion\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"bubbles\">\n        <span className=\"o\"></span>\n        <span className=\"t\"></span>\n        <span className=\"th\"></span>\n        <span className=\"f\"></span>\n        <span className=\"fi\"></span>\n        <span className=\"s\"></span>\n        <span className=\"se\"></span>\n      </div>\n      <motion.h1\n        initial={{ y: -200 }}\n        animate={{ y: 0 }}\n        transition={{ type: \"spring\", duration: 0.5 }}\n        whileHover={{ scale: 1.1 }}\n      >Todo App</motion.h1>\n      <motion.div\n        initial={{ y: 1000 }}\n        animate={{ y: 0 }}\n        transition={{ type: \"spring\", duration:1 }}\n      >\n        <Todos />\n        <DisplayTodos />\n      </motion.div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"./reducer\";\n\nconst store = configureStore({\n    reducer:reducer\n})\n\n\nexport default store;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}